{
module Bar where

import CPP.Intermediate
import CPP.TypeProducer
import CPP.Visualise
import Data.List
import HN.Intermediate
import SPL.Types
import qualified Data.Set as S
import qualified Data.Map as M
import Utils
import Debug.Trace

type ExpressionList  = [Expression]

}

TYPE ExpressionList = [Expression]

DATA Expression
	| Application fn : Expression arg : ExpressionList
	| Atom name : String
	| Constant c : Const

ATTR Expression ExpressionList
	[ fqnTransformer : {(Bool -> String -> String) -> String -> String} fqn : {Bool -> String -> String}
	|
	|
	]

ATTR Expression	[ | | sem : CppExpression ]

ATTR ExpressionList [ | | sem USE {:} {[]} : {[CppExpression]} ]

SEM Expression
	| Constant
		lhs.sem = CppLiteral @c
	| Atom
		lhs.sem = CppAtom $ @lhs.fqnTransformer @lhs.fqn @name
	| Application
		fn.fqnTransformer = transformFunction
		arg.fqnTransformer = transformArgument
		lhs.sem = CppApplication @fn.sem @arg.sem

{

transformArgument fqn a =  if elem ':' aaa && not (isPrefixOf "hn::" aaa) then '&' : aaa else aaa where
				aaa = fqn False a

transformFunction fqn name = fqn True name

transformGlobal fqn name = fqn False name


sem_Expression2 fqn expr = sem_Syn_Expression $ wrap_Expression (sem_Expression expr)
	Inh_Expression {
		fqnTransformer_Inh_Expression = transformGlobal
	,	fqn_Inh_Expression = fqn
	}
}


ATTR Expression [ | | atoms : {S.Set String} ]

ATTR ExpressionList [ | | atoms USE {:} {[]} : {[S.Set String]} ]

SEM Expression
	| Constant    lhs.atoms = S.empty
	| Atom        lhs.atoms = S.singleton @name
	| Application lhs.atoms = S.unions (@fn.atoms : @arg.atoms)


{
getExpressionAtoms expr = atoms_Syn_Expression $ wrap_Expression (sem_Expression expr)
	Inh_Expression {
	}

consMaybe Nothing value = value
consMaybe (Just x) value = x : value


}

TYPE Program = [Definition]

ATTR Program
	[
 		|
		|
		    name USE {:} {[]} : {[String]}
			freeVars USE {`S.union`} {S.empty} : {S.Set String}
			cppVarDefinition USE {`consMaybe`} {[]} : {[CppLocalVarDef]}
			varsFreeInFunctions USE {`S.union`} {S.empty} : {S.Set String}
			templateArgs USE {`S.union`} {S.empty} : {S.Set String}
	]

DATA Definition
	| Definition name : String params : {[String]} value : Expression where : Program

ATTR Definition Program
	[
		fqn2 : {M.Map String CppAtomType}
		typed : C
		symTab : {M.Map String CppAtomType}
		level : Int
	|
	|
	]

ATTR Definition
	[
		inferredType : T
	|
	|
		name : String
		cppDefinition : CppDefinition
		freeVars : {S.Set String}
		cppVarDefinition : {Maybe CppLocalVarDef}
		varsFreeInFunctions : {S.Set String}
		templateArgs : {S.Set String}
	]

{


cppDefType typed args = cppUncurryType (trace3 "AG.cppDefType" $ defType typed) args

deconstructTyped t = (case t of
	CTyped _ (CL (CL (CTyped _ (CL (CL _ (S vars2)) (K types2))) (S vars)) (K types)) -> typeMap (vars ++ vars2) (types ++ types2)
	CTyped _ (CL (CL _ (S vars)) (K types)) -> typeMap vars types
	CTyped _ (CL (CTyped _ (CL (CL _ (S vars)) (K types))) _) -> typeMap vars types
	CTyped _ (CL (CL (CL (CTyped _ (CL (CL (CTyped _ (CL (CL _ (S vars2)) (K types2))) (S vars)) (K types))) _) _) _) -> typeMap (vars ++ vars2) (types ++ types2)
	_ -> error $ "non-exhaustive patterns in deconstructTyped: " ++ show t)
	where
		typeMap vars = M.fromList . zip vars . map (\(CTyped t _) -> t)

justTyped (CTyped t _) = t

defType (CTyped t _) = t
defType (CL (CTyped t (CL _ (K argTypes))) (S _)) = TT $ (map justTyped argTypes) ++ [t]
defType t =  error $ "defType: " ++ show t

typeTemplateArgs = S.toList . typePolyVars

symTabTranslator symTab f x = case M.lookup x symTab of
	Just (CppFqMethod prefix) -> prefix ++ "::" ++ x
	Just CppContextMethod -> if f then "impl." ++ x else "hn::bind(impl, &local::" ++ x ++ ")"
	Nothing -> x
}

SEM Definition
	| Definition
		value.fqnTransformer = transformGlobal
		where.level = @lhs.level + 1
		loc.freeVars = (@value.atoms `S.union` @where.freeVars) `subtractSet` S.fromList @params `subtractSet` S.fromList @where.name
		lhs.freeVars = @loc.freeVars
		loc.cppDefType = cppUncurryType @lhs.inferredType @params
		lhs.cppDefinition = { CppFunctionDef {
				functionLevel           = @lhs.level
			,	functionName            = @name
			,	functionRetExpr         = @value.sem
			,	functionIsStatic        = S.null $ @loc.freeVars `subtractSet` M.keysSet @lhs.symTab
			,	functionArgs            = zipWith CppVarDecl (case @loc.cppDefType of CppTypeFunction _ argTypes -> argTypes ; _ -> []) @params
			, 	functionTemplateArgs    = S.toList @loc.templateArgs
			,	functionReturnType      = case @loc.cppDefType of CppTypeFunction returnType _ -> returnType ; _ -> @loc.cppDefType
			,   functionLocalVars       = @where.cppVarDefinition
			,   functionContext         = constructJust False $ CppContext {
					contextLevel    = @lhs.level
				,   contextTypeName = @loc.contextTypeName
				-- переменные контекста - это
				-- аргументы главной функции, свободные в where-функциях
				-- локальные переменные, свободные в where-функциях (пока не поддерживается!)
				,   contextVars         = fst @loc.argsAndArgsTv
				,   contextTemplateArgs = @loc.contextTemplateArgs
				}
		} }
		lhs.name = @name
		loc.isFunction = not $ null @params
		lhs.cppVarDefinition = constructJust @loc.isFunction $ CppVar (cppType @lhs.inferredType) @name @value.sem
		lhs.varsFreeInFunctions = if @loc.isFunction then @loc.freeVars else S.empty
		loc.isArgContext  = { \a -> S.member a @where.varsFreeInFunctions }
		loc.argsAndArgsTv = { case @lhs.inferredType of
			TT funList -> unzip $ map (\(typ, x) -> (CppVar (cppType typ) x $ CppAtom x, typePolyVars typ)) $ filter (\(_, y) -> @loc.isArgContext y) $ zip (init funList) @params
			_ -> ([], []) }
		loc.templateArgs = typePolyVars @lhs.inferredType
		lhs.templateArgs = @loc.templateArgs

		loc.contextTypeName = @name ++ "_impl"
		loc.contextTemplateArgs = S.toList $ S.unions (@where.templateArgs : snd @loc.argsAndArgsTv)
		loc.isFunctionStatic = S.null $ @loc.freeVars `subtractSet` M.keysSet @lhs.symTab
		loc.classPrefix = CppFqMethod $ @loc.contextTypeName ++ showTemplateArgs @loc.contextTemplateArgs

		value.fqn = symTabTranslator $ @lhs.fqn2  `M.union` @lhs.symTab `subtractKeysFromMap` (@params ++ map (\(CppVar _ name _ ) -> name) @where.cppVarDefinition)


{

unfoldTyped (CL (CL w (S _)) (K [CTyped t ww])) = (t, ww) : unfoldTyped w

xxt x = case x of
	CL (CL w (S _)) (K [CTyped t _]) -> w
	_ -> error $ "xxt: " ++ show x

it x = case x of
	CL (CL w (S _)) (K [CTyped t _]) -> t
	_ -> error $ "it: " ++ show x
}

SEM Program
	| Cons
		tl.typed = xxt @lhs.typed
		hd.inferredType = it @lhs.typed

