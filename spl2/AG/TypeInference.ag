-- Модуль вывода типов

ATTR Expression ExpressionList
		[
			finalSubstitution : {Substitution}
		|
		|
		]



ATTR Definition Expression
	[
		visibleAtoms : {M.Map String T}
	|
	|
		inferredType : T
		s : {Substitution}
		tau : T
	]

ATTR Program Definition Expression ExpressionList
	[
		inhCounter : Int
	|
	|
		synCounter: Int
	]

ATTR Program
	[
		visibleAtoms : {M.Map String T}
	|
	|
		bottomVisibleAtoms : {M.Map String T}
		bottomS : {Substitution}
	]


ATTR ExpressionList
	[
		visibleAtoms : {M.Map String T}
		fnS : {Substitution}
		fnTau : T
	|
	|
		s : {Substitution}
		tau : T
	]

SEM ExpressionList
	| Cons
		hd.inhCounter = @lhs.inhCounter + 1
		tl.inhCounter = @hd.synCounter
		lhs.synCounter = @tl.synCounter
	| Nil
		lhs.synCounter = @lhs.inhCounter


SEM Definition
	| Definition
		-- arguments get fresh type variables
		(where.inhCounter, loc.argAtoms) = freshAtoms @params @lhs.inhCounter
		value.inhCounter = @where.synCounter
		lhs.synCounter = @value.synCounter

		loc.s = xtrace "Definition.s" $ @value.s `composeSubstitutions` @where.bottomS
		lhs.tau = xtrace "Definition.tau" @loc.tau
		lhs.s = @loc.s
		loc.tau = { if null @params
			then @value.tau
			else TT $ map (\(_, beta) -> substituteType beta @value.s)  @argAtoms ++ [@value.tau]
		}
		where.visibleAtoms = M.union (M.fromList @loc.argAtoms) @lhs.visibleAtoms
		value.visibleAtoms = @where.bottomVisibleAtoms

		-- inferredType используется алгоритмом W _ДО_ того, как создается finalSubstitution
		loc.inferredType = xtrace "Definition.@loc.inferredType" $ uncurryType @params $ closure (substituteEnv @loc.s @lhs.visibleAtoms) (xtrace "Definition.itB4closure" $ substituteType  (xtrace "Definition.@loc.tau" @loc.tau) (xtrace ("Definition.loc.s name " ++ @name ++ ":") @loc.s ))
		lhs.inferredType =  @loc.inferredType

		-- finalType используется для "исправления" типов, содержащих
		-- non-generic type variables (термин Карделли)
		-- такие "необобщенные типовые переменные" возникают, если в результате
		-- анализа тела определения получается, что свободная переменная может
		-- иметь любой тип:
		-- let x = 2 in y = i
		-- для терма "i" алгоритм W выводит _МОНОТИП_ вида t324, где t324 - свободная
		-- типовая переменная. В противоположность политипу вида forall t324 . t324,
		-- в котором t324 - связанная типовая переменная
		--
		-- связывание типовых переменных с помощью квантификатора выполняет функция
		-- closure (термин Милнера), принимающая тип и типовое окружение и
		-- возвращающая тип, в котором некоторые типовые переменные квантифицированы
		--
		-- По историческим причинам вместо явных кванторов forall используются два вида
		-- типовых переменных - TV для неквантифицированных и TU для квантифицированных
		-- (описано в SPL.Types.T). Благо из-за shallow types квантор может находиться
		-- только в одном месте - в начале политипа
		--
		-- TU используются очень ограниченно - в MilnerTools.closure создаются, а в
		-- MilnerClosure.instantiatedType уничтожаются (introduction/elimination)

		loc.finalType = xtrace ("Definition." ++ @name ++ ".finalType") $ substituteType @loc.inferredType @lhs.finalSubstitution


SEM Expression
	| Constant
		lhs.s = M.empty
		lhs.tau = constantType @c
		lhs.synCounter = @lhs.inhCounter
	| Atom
		lhs.s = M.empty
		lhs.tau = @loc.tau
		(lhs.synCounter, loc.tau) = lookupAndInstantiate @name (xtrace "Expression.Atom.visibleAtoms" @lhs.visibleAtoms) @lhs.inhCounter
	| Application
		fn.inhCounter = @lhs.inhCounter + 1
		arg.inhCounter = @fn.synCounter
		lhs.synCounter = @arg.synCounter

		arg.visibleAtoms = xtrace "Application.visibleAtoms" $ substituteEnv @fn.s @lhs.visibleAtoms
		arg.fnS = @fn.s
		arg.fnTau = xtrace "Application.fnTau" @fn.tau

		lhs.s = xtrace "Application.s" @arg.s
		lhs.tau = xtrace "Application.tau" @arg.tau

SEM ExpressionList
	| Cons
		loc.v = xtrace "ExpressionList.v" $ unify @lhs.fnTau $ TT [substituteType @hd.tau @hd.s, @loc.beta]
		loc.beta = tv @lhs.inhCounter

		loc.s = xtrace "ExpressionList.loc.s" $ @loc.v `composeSubstitutions` @hd.s `composeSubstitutions` @lhs.fnS

		tl.fnS = xtrace "ExpressionList.tl.fnS" @loc.s
		tl.fnTau = xtrace "ExpressionList.fnTau" $ substituteType @loc.beta @loc.s

		tl.visibleAtoms = xtrace "ExpressionList.tl.visibleAtoms" $ substituteEnv @loc.v $ xtrace "ExpressionList.visibleAtoms" @lhs.visibleAtoms

		lhs.s = @tl.s
	| Nil
		lhs.s = xtrace "ExpressionList.s" @lhs.fnS
		lhs.tau = xtrace "ExpressionList.tau" @lhs.fnTau

SEM Program
	| Cons
		hd.visibleAtoms = xtrace "Program.hd.visibleAtoms" @lhs.visibleAtoms
		tl.visibleAtoms = substituteEnv @hd.s $ M.insert @hd.name @hd.inferredType @lhs.visibleAtoms
		lhs.bottomVisibleAtoms = @tl.bottomVisibleAtoms

		lhs.bottomS = xtrace "Program.bottomS" $ @hd.s `composeSubstitutions` @tl.bottomS

		hd.inhCounter = @lhs.inhCounter
		tl.inhCounter = @hd.synCounter
		lhs.synCounter = @tl.synCounter
	| Nil
		lhs.bottomS = M.empty
		lhs.bottomVisibleAtoms = xtrace "Program.bottomVisibleAtoms" @lhs.visibleAtoms
		lhs.synCounter = @lhs.inhCounter
