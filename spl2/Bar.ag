{
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
module Bar (compile2, Inh_Root(..)) where

import qualified Data.Set as S
import qualified Data.Map as M
import Data.List
import Data.Maybe

import CPP.Intermediate
import CPP.TypeProducer
import CPP.BackendTools

import HN.Intermediate
import HN.TypeTools
import SPL.Types

import MilnerTools
import Utils

type ExpressionList  = [Expression]

}

INCLUDE "AG/Nodes.ag"
INCLUDE "AG/Root.ag"
INCLUDE "AG/ExpressionBuilder.ag"
INCLUDE "AG/Qualifiers.ag"
INCLUDE "AG/TemplateArgs.ag"
INCLUDE "AG/TypeInference.ag"
INCLUDE "AG/DefinitionTypes.ag"

ATTR Expression [ | | atoms : {S.Set String} ]

ATTR ExpressionList [ | | atoms USE {:} {[]} : {[S.Set String]} ]

ATTR LetIn
	[
	|
	|
	    name USE {:} {[]} : {[String]}
		freeVars USE {`S.union`} {S.empty} : {S.Set String}
		cppVarDefinition USE {`consMaybe`} {[]} : {[CppLocalVarDef]}
		varsFreeInFunctions USE {`S.union`} {S.empty} : {S.Set String}
		contextMethods USE {`consMaybe`} {[]} : {[CppDefinition]}
		declareSelf USE {||} {False} : Bool
		declareParent USE {||} {False} : Bool
		sem : CppExpression
	]

ATTR Definition LetIn
	[
		level : Int
		parent : String
	|
	|

	]

ATTR Definition
	[
	|
	|
		name : String
		cppDefinition : CppDefinition
		freeVars : {S.Set String}
		cppVarDefinition : {Maybe CppLocalVarDef}
		varsFreeInFunctions : {S.Set String}
		contextMethods : {Maybe CppDefinition}
		declareSelf : Bool
		declareParent : Bool
	]

SEM Definition
	| Definition
		-- òðèâèàëüíûå àòðèáóòû
		where.level = @lhs.level + 1
		lhs.name = @name
		loc.contextTypeName = @name ++ "_impl"
		loc.isFunction = not $ null @params
		loc.cppDefType = xtrace "Definition.@loc.cppDefType" $ cppType @loc.definitionType
		lhs.contextMethods = constructJust (not @isFunction) $ @loc.cppDefinition
		lhs.cppVarDefinition = constructJust (@loc.isFunction) $ CppVar @loc.cppDefType @name @where.sem

		-- òîï-ôóíêöèÿ, çàìêíóòûå ïåðåìåííûå è ëîêàëüíûå ôóíêöèè
		lhs.cppDefinition = @loc.cppDefinition
		loc.cppDefinition = { CppFunctionDef {
				functionLevel           = @lhs.level
			,	functionName            = @name
			,	functionRetExpr         = @where.sem
			,	functionIsStatic        = @loc.isFunctionStatic
			,	functionArgs            = zipWith CppVarDecl (case @loc.cppDefType of CppTypeFunction _ argTypes -> argTypes ; _ -> []) @params
			, 	functionTemplateArgs    = S.toList @loc.templateArgs
			,	functionReturnType      = case @loc.cppDefType of CppTypeFunction returnType _ -> returnType ; _ -> @loc.cppDefType
			,   functionLocalVars       = localVars
			,   functionContext         = constructJust (null @where.contextMethods) $ CppContext {
					contextLevel    	= @lhs.level
				,   contextTypeName 	= @loc.contextTypeName
				,   contextVars         = @loc.contextArgs ++ contextVars
				,   contextTemplateArgs = @loc.contextTemplateArgs
				,   contextMethods      = @where.contextMethods
				,   contextDeclareSelf  = xtrace "contextDeclareSelf" @where.declareSelf
				,   contextParent   	= xtrace "contextParent" $ constructJust (not @where.declareParent) $ @lhs.parent ++ "_impl"
				}
		} where
			(contextVars, localVars) = partition (\(CppVar _ name _) -> S.member name @where.varsFreeInFunctions) @where.cppVarDefinition
		}

		where.parent = @name

		(loc.contextArgs, loc.argsTv) = { case @loc.definitionType of
			TT funList -> let isArgContext a =  S.member a @where.varsFreeInFunctions in
				unzip $ map (\(typ, x) -> (CppVar (cppType typ) x $ CppAtom x, typeTu typ)) $ filter (\(_, y) -> isArgContext y) $ zip (init funList) @params
			_ -> ([], []) }

		loc.freeVars = (@where.atoms `S.union` @where.freeVars) S.\\ S.fromList (@params ++ @where.name)
		lhs.freeVars = @loc.freeVars
		lhs.varsFreeInFunctions = if @loc.isFunction then @loc.freeVars else S.empty

ATTR LetIn
	[
	|
	|
		atoms : {S.Set String}
	]

SEM Expression
	| Constant    lhs.atoms = S.empty
	| Atom        lhs.atoms = S.singleton @name
	| Application lhs.atoms = S.unions (@fn.atoms : @arg.atoms)
