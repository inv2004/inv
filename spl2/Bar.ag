{
import CPP.Intermediate
import CPP.Visualise
import HN.Intermediate hiding(Expression,Constant,Atom,Application)
import Data.List

}

TYPE ExpressionList = [Expression]

DATA Expression
	| Application fn : Expression arg : ExpressionList
	| Atom name : String 
	| Constant c : Const

ATTR Expression ExpressionList
	[ atomFlag : Bool  isApplicand : Bool
	|
	| 

	]

ATTR Expression
	[
	|
	| sem : CppExpression
	]

ATTR ExpressionList
	[
	|
	| sem USE {:} {[]} : {[CppExpression]}
	]

SEM Expression
	| Constant
		lhs.sem = CppLiteral @c
	| Atom
		lhs.sem = CppAtom $ (if @lhs.isApplicand then transformOperand else fqn @lhs.atomFlag) @name
	| Application
		fn.atomFlag = True
		arg.atomFlag = False
		lhs.sem = CppApplication @fn.sem @arg.sem


{

transformOperand a =  if elem ':' aaa && not (isPrefixOf "hn::" aaa) then '&' : aaa else aaa where
				aaa = fqn False a

fqn _ a = a

main = print $ sem_Syn_Expression $ wrap_Expression (sem_Expression (Application (Atom "foo") [Atom "bar", Constant (ConstInt 2)])) Inh_Expression { atomFlag_Inh_Expression = False, isApplicand_Inh_Expression = False }

}
